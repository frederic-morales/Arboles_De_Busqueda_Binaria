@page "/"
@rendermode InteractiveServer
@using Arboles_De_Busqueda_Binaria.models
@using Arboles_De_Busqueda_Binaria.services

<div class="container mt-5">
    <h3 class="text-center">Árbol Binario Visual</h3>

    @if (Arbol.Raiz != null)
    {
        <TreeNode Nodo="Arbol.Raiz" />
    }
    else
    {
        <p class="text-muted text-center">El árbol está vacío</p>
    }

    <div class="mt-4 text-center">
        <input type="number" @bind="Valor" placeholder="Valor" class="form-control d-inline-block w-auto me-2" />
        <button class="btn btn-success me-2" @onclick="Agregar">Agregar</button>
        <button class="btn btn-danger me-2" @onclick="Eliminar">Eliminar</button>
        <button class="btn btn-primary me-2" @onclick="Buscar">Buscar</button>
    </div>

    @if (encontrado)
    {
        <p class="text-success text-center">Valor encontrado: @Valor</p>
    }

    <div class="mt-4 text-center">
        <button class="btn btn-outline-dark me-2" @onclick="MostrarInorden">Inorden</button>
        <button class="btn btn-outline-dark me-2" @onclick="MostrarPreorden">Preorden</button>
        <button class="btn btn-outline-dark me-2" @onclick="MostrarPostorden">Postorden</button>
    </div>

    @if (RecorridoActual != null && RecorridoActual.Any())
    {
        <div class="mt-3 text-center">
            <h5>Recorrido @TipoRecorrido:</h5>
            <ul class="list-unstyled d-inline-block">
                @foreach (var valor in RecorridoActual)
                {
                    <li>@valor</li>
                }
            </ul>
        </div>
    }
</div>

@code {
    private ArbolBinarioBusqueda Arbol = new();
    private int Valor;
    private bool encontrado = false;

    private List<int> RecorridoActual = new();
    private string TipoRecorrido = "";

    private void Agregar()
    {
        Arbol.Insertar(Valor);
        encontrado = false;
        RecorridoActual.Clear();
    }

    private void Eliminar()
    {
        Arbol.Eliminar(Valor);
        encontrado = false;
        RecorridoActual.Clear();
    }

    private void Buscar()
    {
        encontrado = Arbol.Buscar(Valor);
        RecorridoActual.Clear();
    }

    private void MostrarInorden()
    {
        RecorridoActual = Arbol.RecorridoInorden();
        TipoRecorrido = "Inorden";
    }

    private void MostrarPreorden()
    {
        RecorridoActual = Arbol.RecorridoPreorden();
        TipoRecorrido = "Preorden";
    }

    private void MostrarPostorden()
    {
        RecorridoActual = Arbol.RecorridoPostorden();
        TipoRecorrido = "Postorden";
    }
}
